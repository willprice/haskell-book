* Chapter 16: Functor

Functors are combinators: they take a sentence or phrase as an input and produce
a sentence or phrase as an output with some logical operation applied to the whole.

Functors apply a function over or around some structure that is to be left
unaltered, i.e. we want to apply a function to whats inside the structure (e.g.
fmapping over lists)

#+BEGIN_SRC haskell
class Functor f where

   fmap :: (a -> b) -> f a -> f b

#+END_SRC

So ~fmap~ takes a function  unaware of structure and wraps it so that it can
operate over structure.

Without a type argument the type class Functor collapses to normal function
application ~$~!

~fmap~ is aliased to ~<$>~, notice the similarity to ~$~, but the extra brackets
denote we're applying the function within a container!


** Ex 1: Be Kind

1. What is the kind of ~a~ in ~a -> a~ ? ~*~
2. What are the kinds of ~b~ and ~T~ in ~a -> b a -> T (b a)~? ~b~ has
   the kind ~* -> *~ and ~T~ has the kind ~* -> *~
3. What's the kind of ~c~ in ~c a b -> c b a~? ~* -> * -> *~

The infix ~fmap~ syntax is ~<$>~ because of its relation with function
application ~$~, it is function application within a structure where the
angle brackets are the structure!

** Laws

- Identity: ~fmap id == id~
- Composition: ~fmap (f . g) == fmap f . fmap g~

** Fmap in detail

- ~fmap :: (Functor f) => (a -> b) -> f a -> f b~
- ~(.) :: (b -> c) -> (a -> b) -> a -> c~
- ~fmap . fmap~
  - ~(b -> c) -> (a -> b) -> a -> c~
    - ~a = (a1 -> b1)~
    - ~b = (f1 a1 -> f1 b1)~
    - ~c = (f2 a2 -> f2 b2) = (f2 (f1 a1)) -> (f2 (f1 b2))~
    - ~(((f1 a1 -> f1 b1) -> (f2 (f1 a1)) -> f2 (f1 b1))) -> (((a1 -> b1) -> (f1 a1 -> f1 b1)) -> (a1 -> b1)) -> (f2 (f1 a1) -> f2 (f1 b1))~
- ~fmap . fmap :: (Functor f1, Functor f2) => (a -> b) -> f1 (f2 a) -> f1 (f2 b)~

** Exercises: Heavy lifting

   1. ~a = fmap (+1) $ read "[1]" :: [Int]~
   2. ~b = (fmap . fmap) (++ "lol") (Just ["Hi", "Hello"])~
   3. ~c = fmap (*2) (\x -> x - 2)~
   4. ~d = fmap ((return '1' ++) . show) (\x -> [x, 1..3])~
   5.
      e :: IO Integer
      e = let ioi = readIO "1" :: IO Integer
              changed = read ("123" ++) show ioi
          in (* 3) changed
